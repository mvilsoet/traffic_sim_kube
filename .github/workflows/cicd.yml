name: Deploy Project to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  provision-aws:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.1.7

    - name: Terraform Init w S3 backend
      run: |
        terraform init \
          -backend-config="bucket=mvilsoet-bucket" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=us-east-2"
      working-directory: ./terraform

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      id: plan
      run: terraform plan -out=tfplan
      continue-on-error: true
      working-directory: ./terraform

    - name: Terraform Show
      id: show
      run: terraform show -json tfplan > plan.json
      working-directory: ./terraform

    - name: Calculate Estimated Costs
      run: |
        terraform apply -auto-approve
        terraform output -json > pricing_output.json
      working-directory: ./terraform

    - name: Display Estimated Costs
      run: |
        echo "Estimated costs:"
        cat pricing_output.json
      working-directory: ./terraform

    - name: Provision AWS resources
      run: terraform apply -auto-approve
      working-directory: ./terraform

  generate-initial-state:
    needs: provision-aws
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Generate and Upload Initial State to S3
      run: python scripts/initial_state.py

  build-and-push:
    needs: generate-initial-state
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker-compose build
        for service in simcore agentmodule trafficmodule vizmodule; do
          docker push $ECR_REGISTRY/${service}:$IMAGE_TAG
        done

  deploy-to-eks:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure kubectl
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name traffic-simulation-cluster

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/sc-deployment.yaml
        kubectl apply -f k8s/am-deployment.yaml
        kubectl apply -f k8s/tm-deployment.yaml
        kubectl apply -f k8s/vm-deployment.yaml
